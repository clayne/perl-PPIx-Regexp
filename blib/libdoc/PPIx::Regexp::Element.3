.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.08)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PPIx::Regexp::Element 3"
.TH PPIx::Regexp::Element 3 "2009-10-15" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PPIx::Regexp::Element \- Base of the PPIx::Regexp hierarchy.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
No user-serviceable parts inside. No parts at all, to be frank about it.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 1
\& none
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class exists to be the base of the PPIx::Regexp
object hierarchy.  It contributes nothing to its progeny but its name,
to allow PPIx::Regexp objects to be identified. All the
functionality is either implemented in other
PPIx::Regexp objects, or inherited from \s-1PPI\s0 by another
path, since to avoid confusion this class does not inherit from anyone.
.SH "METHODS"
.IX Header "METHODS"
None.
.SS "ancestor_of"
.IX Subsection "ancestor_of"
This method returns true if the object is an ancestor of the argument,
and false otherwise. By the definition of this method, \f(CW$self\fR is its
own ancestor.
.SS "class"
.IX Subsection "class"
This method returns the class name of the element. It is the same as
\&\f(CW\*(C`ref $self\*(C'\fR.
.SS "comment"
.IX Subsection "comment"
This method returns true if the element is a comment and false
otherwise.
.SS "content"
.IX Subsection "content"
This method returns the content of the element.
.SS "descendant_of"
.IX Subsection "descendant_of"
This method returns true if the object is a descendant of the argument,
and false otherwise. By the definition of this method, \f(CW$self\fR is its
own descendant.
.SS "next_sibling"
.IX Subsection "next_sibling"
This method returns the element's next sibling, or nothing if there is
none.
.SS "parent"
.IX Subsection "parent"
This method returns the parent of the element, or undef if there is
none.
.SS "perl_version_introduced"
.IX Subsection "perl_version_introduced"
This method returns the version of Perl in which the element was
introduced. But in practice it will never return a number less than
5.006, since that is the minimum version supported by this package.
.SS "perl_version_removed"
.IX Subsection "perl_version_removed"
This method returns the version of Perl in which the element was
removed. If the element is still valid the return is \f(CW\*(C`undef\*(C'\fR.
.SS "previous_sibling"
.IX Subsection "previous_sibling"
This method returns the element's previous sibling, or nothing if there
is none.
.SS "significant"
.IX Subsection "significant"
This method returns true if the element is significant and false
otherwise.
.SS "snext_sibling"
.IX Subsection "snext_sibling"
This method returns the element's next significant sibling, or nothing
if there is none.
.SS "sprevious_sibling"
.IX Subsection "sprevious_sibling"
This method returns the element's previous significant sibling, or
nothing if there is none.
.SS "tokens"
.IX Subsection "tokens"
This method returns all tokens contained in the element.
.SS "top"
.IX Subsection "top"
This method returns the top of the hierarchy.
.SS "whitespace"
.IX Subsection "whitespace"
This method returns true if the element is whitespace and false
otherwise.
.SS "nav"
.IX Subsection "nav"
This method returns navigation information from the top of the hierarchy
to this node. The return is a list of names of methods and references to
their argument lists. The idea is that given \f(CW$elem\fR which is somewhere
under \f(CW$top\fR,
.PP
.Vb 9
\& my @nav = $elem\->nav();
\& my $obj = $top;
\& while ( @nav ) {
\&     my $method = shift @nav;
\&     my $args = shift @nav;
\&     $obj = $obj\->$method( @{ $args } ) or die;
\& }
\& # At this point, $obj should contain the same object
\& # as $elem.
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is by the author. Please file bug reports at
<http://rt.cpan.org>, or in electronic mail to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III\s0 \fIwyant at cpan dot org\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2009 by Thomas R. Wyant, \s-1III\s0.
