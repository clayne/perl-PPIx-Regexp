#!/usr/local/bin/perl

use strict;
use warnings;

use autodie;

use File::Find;
use Getopt::Long;
use IO::File;
use Pod::Usage;
use Text::Wrap;
use YAML;

our $VERSION = '0.000_01';

my %opt;

GetOptions( \%opt,
    qw{ text! update! },
    help => sub { pod2usage( { -verbose => 2 } ) },
) or pod2usage( { -verbose => 0 } );

$opt{text} ||= $opt{update};

find ( \&heritage, 'lib' );

my %roots;
my %progeny;

foreach my $module ( keys %roots ) {
    foreach my $parent ( @{ $roots{$module} } ) {
	push @{ $progeny{$parent} ||= [] }, $module;
    }
}

if ( $opt{text} ) {
    local $Text::Wrap::columns = 72;
    local $Text::Wrap::huge = 'overflow';
    foreach my $module ( sort keys %roots ) {
	my $heritage;
	if ( my @parents = sort @{ $roots{$module} } ) {
	    $heritage = "C<$module> is a " . join(' and a ',
		map { "L<$_|$_>" } @parents ) . ".";
	} else {
	    $heritage = "C<$module> is not descended from any other class.";
	}
	$heritage = wrap( '', '', $heritage );
	my $progeny;
	if ( my @offspring = sort @{ $progeny{$module} || [] } ) {
	    @offspring = map { "L<$_|$_>" } @offspring;
	    my $last = pop @offspring;
	    if ( @offspring ) {
		$progeny = "C<$module> is the parent of " .
		    join( ', ', @offspring ) . " and $last.";
	    } else {
		$progeny = "C<$module> is the parent of $last.";
	    }
	} else {
	    $progeny = "C<$module> has no descendants.";
	}
	$progeny = wrap( '', '', $progeny );
	if ( $opt{update} ) {
	    ( my $fn = $module ) =~ s{ :: }{/}smxg;
	    $fn = 'lib/' . $fn . '.pm';
	    -e $fn or die "$fn does not exist.";
	    my $fh = IO::File->new( $fn, '<' )
		or die "Unable to open $fn for input: $!\n";
	    my @content;
	    while (<$fh>) {
		push @content, $_;
		if ( m/ \A =head1 \s+ INHERITANCE \b /smx ) {
		    push @content, "\n";
		    push @content, $heritage . "\n";
		    push @content, "\n";
		    push @content, $progeny . "\n";
		    push @content, "\n";
		    while (<$fh>) {
			m/ \A =head1 \b /smx or next;
			push @content, $_;
			last;
		    }
		}
	    }
	    close $fh;
	    $fh = IO::File->new( $fn, '>' )
		or die "Unable to open $fn for output: $!\n";
	    print { $fh } @content;
	    close $fh;
	} else {
	    print $heritage, "\n", $progeny, "\n\n";;
	}
    }
} else {
    print Dump( \%roots );
}

sub heritage {
    my ( $fn ) = $_;
    -T $fn or return;
    $fn =~ m/ [.] pm \z /smx or return;
    local $/ = undef;
    open my $fh, '<', $fn;
    local $_ = <$fh>;
    close $fh;
    m/ \b package \s+ ( (?: \w+ :: )* \w+ ) \s* ; /smx or return;
    my $package = $1;
    my @parents;
    $roots{$package} = \@parents;
    m/ \b use \s+ base \s+ ( [^;]* ) /smx or return;
    my $ancest = $1;
    if ( $ancest =~ s/ \A qw \s* //smx ) {
	$ancest =~ s/ \A . \s* //smx;
	$ancest =~ s/ \s* . \z //smx;
    }
    foreach my $class ( split qr{\s+}smx, $ancest ) {
	$class =~ m/ \A (?: \w+ :: )* \w+ \z /smx or next;
	push @parents, $class;
    }
}

__END__

=head1 TITLE

heritage - Generate INHERITANCE portion of POD

=head1 SYNOPSIS

 heritage
 heritage -update
 heritage -help
 heritage -version

=head1 OPTIONS

<<< replace boiler plate >>>

=head2 -help

This option displays the documentation for this script. The script then
exits.

=head2 -text

If this option is asserted, the text of the INHERITANCE section of the
POD is generated. If not, you just get a L<Data::Dumper|Data::Dumper>
dump of the inheritance data.

The default is C<-notext>, but if C<-update> is asserted this option is
forced to be asserted.

=head2 -update

If this option is asserted, the INHERITANCE section of all modules is
rewritten. The C<-text> option is also forced to be true,

The default is C<-noupdate>.

=head2 -version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl script analyzes the inheritance structure of the contents of
F<lib/>, and updates the INHERITANCE section of the POD to match.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2009-2014 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut


# ex: set textwidth=72 :
