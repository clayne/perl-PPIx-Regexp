#!/usr/bin/env perl

use 5.008;

use strict;
use warnings;

use Data::Dumper;
use Getopt::Long 2.33 qw{ :config auto_version };
use PPIx::Regexp::Tokenizer;
use PPIx::Regexp::Dumper;
use Pod::Usage;

our $VERSION = '0.000_01';

my %opt = (
    dump	=> 0,
);

GetOptions( \%opt,
    qw{ data! dump=i tokens! },
    help => sub { pod2usage( { -verbose => 2 } ) },
) or pod2usage( { -verbose => 0 } );

print <<"END-OF-DATA";
package main;

use strict;
use warnings;

use lib qw{ inc };

use PPIx::Regexp::Test;

note <<'EOD';
This test generated by $0

EOD
END-OF-DATA

generate_tests(
    note	=> 'Test literals outside classes and sets',
    not_literal		=> qr{ [][()\$\@\\] }smx,
    not_escaped_literal	=> qr{ [0-9Q] }smx,
    foreword		=> 'm{',
    afterword		=> '}',
);

generate_tests(
    note	=> 'Test literals outside classes and sets, /x',
    not_literal		=> qr{ [][()\$\@\\#] }smx,
    not_escaped_literal	=> qr{ [0-9Q] }smx,
    foreword		=> 'm{',
    afterword		=> '}x',
);

generate_tests(
    note	=> 'Test literals in bracketed character classes',
    not_literal		=> qr{ [][\$\@\\-] }smx,
    not_escaped_literal	=> qr{ [0-9Q] }smx,
    foreword		=> 'm{[',
    prolog		=> '][',
    epilog		=> '-',
    afterword		=> ']}',
);

generate_tests(
    note	=> 'Test literals in bracketed character classes, /x',
    not_literal		=> qr{ [][\$\@\\-] }smx,
    not_escaped_literal	=> qr{ [0-9Q] }smx,
    foreword		=> 'm{[',
    prolog		=> '][',
    epilog		=> '-',
    afterword		=> ']}',
);

generate_tests(
    note	=> 'Test literals in extended bracketed classes',
    not_literal		=> qr{ [][\$\@\\-] }smx,
    not_escaped_literal	=> qr{ [0-9Q] }smx,
    foreword		=> 'm{(?[',
    afterword		=> '])}',
);

generate_tests(
    note	=> 'Test literals in extended bracketed classes, /x',
    not_literal		=> qr{ [][\$\@\\-] }smx,
    not_escaped_literal	=> qr{ [0-9Q] }smx,
    foreword		=> 'm{(?[',
    afterword		=> '])}x',
);

print <<'EOD';

done_testing;

1;

# ex: set textwidth=72 :
EOD

sub generate_tests {
    my %arg = @_;

    foreach my $name ( qw{ prolog epilog } ) {
	defined $arg{$name}
	    or $arg{$name} = '';
    }

    defined $arg{note}
	and print <<"END-OF-DATA";

note <<'EOD';
$arg{note}
EOD
END-OF-DATA

    my $regex;
    foreach my $ord ( 32 .. 126 ) {
	my $chr = chr $ord;
	defined $arg{not_literal}
	    and $chr =~ m/$arg{not_literal}/smx
	    or $regex .= $chr;
	defined $arg{not_escaped_literal}
	    and $chr =~ m/$arg{not_escaped_literal}/smx
	    or $regex .= "\\$chr";
    }

    $regex =
	"$arg{foreword}$arg{prolog}$regex$arg{epilog}$arg{afterword}";
    1 == $opt{dump}
	and return dump_regexp( $regex, tokens => $opt{tokens} );

    my $tzr = PPIx::Regexp::Tokenizer->new( $regex );

    $regex = quote( $regex );
    my @tkns = $tzr->tokens();
    print <<"EOD";

tokenize( $regex );
count   ( @{[ scalar @tkns ]} );
EOD
    my $inx = 0;
    foreach my $token ( @tkns ) {
	my $class = ref $token;
	print <<"EOD";
choose  ( $inx );
class   ( '$class' );
content ( @{[ quote( $token->content() ) ]} );
EOD
    } continue {
	$inx++;
    }

    return;
}

sub dump_regexp {
    my ( $regexp, %arg ) = @_;
    if ( $opt{data} ) {
	print Dumper( $regexp ), "\n";
    } else {
	ref $regexp
	    or print $regexp, "\n";
	my $dumper = PPIx::Regexp::Dumper->new( $regexp, %arg );
	$dumper->print();
    }
    return;
}

sub quote {
    my ( $string ) = @_;
    $string =~ s/ (?= ['\\] ) /\\/smxg;
    return "'$string'";
}
__END__

=head1 TITLE

generate_literal_test - <<< replace boiler plate >>>

=head1 SYNOPSIS

 generate_literal_test
 generate_literal_test -help
 generate_literal_test -version

=head1 OPTIONS

<<< replace boiler plate >>>

=head2 -help

This option displays the documentation for this script. The script then
exits.

=head2 -version

This option displays the version of this script. The script then exits.

=head1 DETAILS

<<< replace boiler plate >>>

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2014 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
