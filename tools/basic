#!/usr/bin/env perl

use strict;
use warnings;

use File::Find;
use Getopt::Long 2.33 qw{ :config auto_version };
use Pod::Usage;
use Scalar::Util qw{ looks_like_number };
use Text::Wrap;

our $VERSION = '0.041_01';

my %opt;

GetOptions( \%opt,
    help => sub { pod2usage( { -verbose => 2 } ) },
) or pod2usage( { -verbose => 0 } );

local $Text::Wrap::columns = 72;

chdir 'lib' or die "Unable to chdir to lib: $!\n";

my %special = (
    'PPIx::Regexp' => {
	instance => undef,
	parent	=> 'PPIx::Regexp::Node',
    },
    'PPIx::Regexp::Constant' => {
	instance => undef,
	parent	=> 'Exporter',
    },
    'PPIx::Regexp::Element' => {
	instance => undef,
	parent	=> undef,
    },
    'PPIx::Regexp::Dumper' => {
	instance => [ new => [ 'xyzzy' ] ],
	parent	=> 'PPIx::Regexp::Support',
    },
    'PPIx::Regexp::Token::Backreference' => {
	parent	=> 'PPIx::Regexp::Token::Reference',
    },
    'PPIx::Regexp::Token::Condition' => {
	parent	=> 'PPIx::Regexp::Token::Reference',
    },
    'PPIx::Regexp::Token::GroupType::Modifier' => {
	parent	=> [ 'PPIx::Regexp::Token::GroupType',
		    'PPIx::Regexp::Token::Modifier', ],
    },
    'PPIx::Regexp::Token::Interpolation' => {
	parent	=> 'PPIx::Regexp::Token::Code',
    },
    'PPIx::Regexp::Lexer' => {
	parent	=> 'PPIx::Regexp::Support',
    },
    'PPIx::Regexp::Node' => {
	parent	=> 'PPIx::Regexp::Element',
    },
    'PPIx::Regexp::Token::Recursion' => {
	parent	=> 'PPIx::Regexp::Token::Reference',
    },
    'PPIx::Regexp::Structure' => {
	parent	=> 'PPIx::Regexp::Node',
    },
    'PPIx::Regexp::Structure::NamedCapture' => {
	parent	=> 'PPIx::Regexp::Structure::Capture',
    },
    'PPIx::Regexp::Structure::Regexp' => {
	parent	=> 'PPIx::Regexp::Structure::Main',
    },
    'PPIx::Regexp::Structure::Replacement' => {
	parent	=> 'PPIx::Regexp::Structure::Main',
    },
    'PPIx::Regexp::Support' => {
	parent	=> undef,
    },
    'PPIx::Regexp::Tokenizer' => {
	instance => [ new => [ 'xyzzy' ] ],
	parent	=> 'PPIx::Regexp::Support',
    },
    'PPIx::Regexp::Token' => {
	parent	=> 'PPIx::Regexp::Element',
    },
    'PPIx::Regexp::Util'	=> {
	parent	=> undef,
    },
);

my %normal = (
    instance => sub {
	my ( $pkg ) = @_;
	if ( $pkg =~ m/ \A PPIx::Regexp::Token /smx ) {
	    return [ _new => [ 'xyzzy' ] ];
	}
	return;
    },
    parent => sub {
	my ( $pkg ) = @_;
	( my $parent = $pkg ) =~ s/ :: \w+ \z //smx;
	return $parent;
    },
);

my @found;

find( {
	no_chdir => 1,
	wanted => sub {
	    s/ [.] pm \z //smx or return;
	    s/ \A .*? PPIx /PPIx/smx;
	    s{ / }{::}smxg;
	    push @found, $_;
	},
    }, File::Spec->curdir() );

my @tests;
foreach my $pkg ( sort @found ) {
    push @tests, "require_ok( '$pkg' )";

    if ( defined( my $parent = determine( $pkg, 'parent' ) ) ) {
	my @folks = ref $parent eq 'ARRAY' ? @{ $parent } : $parent;
	foreach my $pop ( @folks ) {
	    push @tests, "isa_ok( '$pkg', '$pop' )";
	}
    }

    if ( defined( my $instance = determine( $pkg, 'instance' ) ) ) {
	my ( $method, $args ) = @{ $instance };
	push @tests, "isa_ok( $pkg->$method( " . join(', ', map{ safe(
		    $_ ) } @{ $args } ) . " ), '$pkg' )";
    }

}

print <<'EOD';
package main;

use strict;
use warnings;

use Test::More 0.88;

require_ok( 'PPI::Document' )
    or BAIL_OUT(
    q{PPI::Document is a prerequisite. Without it, we're hosed.} );

EOD

foreach my $tst ( @tests ) {
    $tst =~ m/ \A require_ok \b /smx
	and print "\n";
    print wrap( '', '    ', "$tst or BAIL_OUT;\n");
}

print <<'EOD';

done_testing;

1;
EOD

sub determine {
    my ( $pkg, $what ) = @_;
    exists $special{$pkg}{$what}
	and return $special{$pkg}{$what};
    return $normal{$what}->( $pkg );
}

sub safe {
    my ( $string ) = @_;
    looks_like_number( $string ) and return $string;
    $string =~ s/ ( [\\'] ) /\\$1/smxg;
    return "'$string'";
}

__END__

=head1 TITLE

basic - Generate t/basic.t

=head1 SYNOPSIS

 basic >t/basic.t
 basic -help
 basic -version

=head1 OPTIONS

=head2 -help

This option displays the documentation for this script. The script then
exits.

=head2 -version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl script generates F<t/basic.t> by traversing the F<lib/>
directory. The individual modules are not, unfortunately, loaded in
dependency order.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2009-2015 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
