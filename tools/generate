#!/usr/local/bin/perl

use strict;
use warnings;

use File::Spec;

@ARGV or die "No class name provided";

my $template = <<'EOD';
=head1 NAME

%1$s - Do something for the PPIx::Regexp package.

=head1 SYNOPSIS

 use PPIx::Regexp::Dumper;
 PPIx::Regexp::Dumper->new( 'qr{foo}smx' )
     ->print();

=head1 INHERITANCE

 %1$s
 isa %2$s

=head1 DESCRIPTION

Insert tedious prose here.

=head1 METHODS

This class provides no public methods beyond those provided by its
superclass.

This class provides the following public methods. Methods not documented
here are private, and unsupported in the sense that the author reserves
the right to change or remove them without notice.

=cut

package %1$s;

use strict;
use warnings;
%3$s
use base qw{ %2$s };

our $VERSION = '0.000_01';
%4$s
1;

__END__

=head1 SUPPORT

Support is by the author. Please file bug reports at
L<http://rt.cpan.org>, or in electronic mail to the author.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT

Copyright 2009 by Thomas R. Wyant, III.

=cut

# ex: set textwidth=72 :
EOD

foreach my $class ( @ARGV ) {
    my $full = 'PPIx::Regexp::' . $class;
    ( my $super = $full ) =~ s/ :: \w+ \z //smx;
    my @path = split qr{ :: }smx, $full;
    $path[-1] .= '.pm';
    unshift @path, 'lib';

    my ( $use, $code );
    if ( $full =~ m/ \b Token \b /smx ) {
	$use = '';
	$code = <<'EOD';

# Return true if the token can be quantified, and false otherwise
# sub can_be_quantified { return };

# Return true to be included in the token scan. This determination
# should be good for the life of the tokenizer. It is called as a static
# method with two arguments: the tokenizer object and the mode name. Use
# of the latter is pre-deprecated.
# sub __PPIX_TOKEN__scan_me {
#     my ( $class, $tokenizer, $mode ) = @_;
#     return $tokenizer->interpolates();
# };

sub __PPIX_TOKENIZER__normal {
    my ( $class, $tokenizer, $character ) = @_;

    return $character eq 'x' ? 1 : 0;
}
EOD
    } else {
	$use = '';
	$code = '';
    }
    my $fn = File::Spec->catfile( @path );
    open ( my $fh, '>', $fn )
	or die "Failed to open $fn: $!\n";
    print { $fh } sprintf $template, $full, $super, $use, $code;
    close $fh;
    system {'gvim'} 'gvim', $fn;
}

# ex: set textwidth=72 :
